[13/01/2020]
https://hackernoon.com/10-oop-design-principles-every-programmer-should-know-f187436caf65

1. DRY (Don’t repeat yourself)
	It’s important not to abuse it, duplication is not for code, but for functionality.
	Example: 
	It means if you have used common code to validate OrderId and SSN it doesn’t mean they 
	are the same or they will remain the same in future.
	By using common code for two different functionality or thing you closely couple them 
	forever and when your OrderId changes its format, your SSN validation code will break.
	
2. Encapsulate What Changes
	The benefit of this OOP Design principle is that It’s easy to test and maintain proper 
	encapsulated code.
	Several of the design patterns in Java uses Encapsulation, the Factory design pattern 
	is one example of Encapsulation which encapsulates object creation code and provides 
	flexibility to introduce a new product later with no impact on existing code.
	
3. Open Closed Design Principle
	Classes, methods or functions should be Open for extension (new functionality) and 
	Closed for modification
	
	The key benefit of this design principle is that already tried and tested code is not 
	touched which means they won’t break.
	
4. Single Responsibility Principle (SRP)
	As per SRP, there should not be more than one reason for a class to change, or a class 
	should always handle single functionality.
	
	The key benefit of this principle is that it reduces coupling between the individual 
	component of the software and Code.
	
5. Dependency Injection or Inversion principle
	The beauty of this design principle is that any class which is injected by DI framework 
	is easy to test with the mock object and easier to maintain because object creation code 
	is centralized in the framework and client code is not littered with that.
	
	There are multiple ways to implemented Dependency injection like using bytecode 
	instrumentation which some AOP (Aspect Oriented programming) framework like AspectJ does 
	or by using proxies just like used in Spring.
	
6. Favour Composition over Inheritance
	Composition allows changing the behaviour of a class at run-time by setting property during 
	run-time and by using Interfaces to compose a class we use polymorphism which provides 
	flexibility to replace with better implementation any time.
	
7. Liskov Substitution Principle (LSP)
	Subtypes must be substitutable for supertype meaning that methods or functions which uses 
	superclass type must be able to work with the object of subclass without any issue.
	
8. Interface Segregation Principle (ISP)
	Another benefit of this design principle in Java is, the interface has the disadvantage 
	of implementing all method before any class can use it so having single functionality 
	means less method to implement.
	
9. Programming for Interface not implementation
	
10. Delegation principles
	The key benefit of this design principle is no duplication of code and pretty easy to modify 
	behaviour. 
	
	
[13/02/2020]
https://javarevisited.blogspot.com/2011/08/what-is-polymorphism-in-java-example.html

https://javarevisited.blogspot.com/2011/12/factory-design-pattern-java-example.html

https://javarevisited.blogspot.com/2011/09/code-review-checklist-best-practice.html
10 points checklist on Code Review
	1) Does Code meet the functional requirement
	2) Is there any Side effect of this change
	3) Concurrency: does code is thread-safe? Does it have properly synchronized if using shared 
		resource? Does it free of any kind of deadlock or live-lock?
	4) Readability and maintenance
	5) Consistency
	6) Performance
	7) Exception handling
	8) Simplicity
	9) Reuse of existing code
	10) Unit test
	
https://javarevisited.blogspot.com/2018/07/10-tips-on-working-fast-in-unix-or-linux.html

https://javarevisited.blogspot.com/2018/07/10-tips-on-working-fast-in-unix-or-linux.html
1) You have thread T1, T2, and T3, how will you ensure that thread T2 run after T1 and thread T3 run after T2?
	-> use "join" method: 
		https://www.java67.com/2015/07/how-to-join-two-threads-in-java-example.html

2) What is the advantage of new Lock interface over a synchronized block in Java? You need 
	to implement a high-performance cache which allows multiple readers but the single writer 
	to keep the integrity how will you implement it?
		https://javarevisited.blogspot.com/2013/03/reentrantlock-example-in-java-synchronized-difference-vs-lock.html
	
3) What are differences between wait and sleep method in Java?
	-> wait releases lock while sleep keeps lock (blocking). 
	
4) Write code to implement blocking queue in Java?

5) Write code to solve the Produce consumer problem in Java?

6) Write a program which will result in a deadlock? How will you fix deadlock in Java?

7) What is an atomic operation? What are atomic operations in Java?

8) What is a volatile keyword in Java? How to use it? How is it different from the synchronized method in Java?

10) How will you take thread dump in Java? How will you analyse Thread dump?

11) Why we call start() method which in turns calls run() method, why not we directly call run() method?

12) How will you awake a blocked thread in Java?

13) What is the difference between CyclicBarriar and CountdownLatch in Java?

14) What is an immutable object? How does it help in writing a concurrent application?

15) What are some common problems you have faced in multi-threading environment? How did you resolve it?


https://javarevisited.blogspot.com/2018/08/how-to-avoid-deadlock-in-java-threads.html


[15/01/2020]
https://javarevisited.blogspot.com/2012/07/countdownlatch-example-in-java.html								done

https://javarevisited.blogspot.com/2014/05/10-articles-every-programmer-must-read.html						read

https://javarevisited.blogspot.com/2013/07/java-string-tutorial-and-examples-beginners-programming.html		read

https://javarevisited.blogspot.com/2012/03/why-character-array-is-better-than.html 							read

https://javarevisited.blogspot.com/2011/10/how-substring-in-java-works.html									read

https://javarevisited.blogspot.com/2012/01/get-set-default-character-encoding.html							read

https://javarevisited.blogspot.com/2011/11/hotspot-jvm-options-java-examples.html							read

https://javarevisited.blogspot.com/2013/02/concurrenthashmap-in-java-example-tutorial-working.html			read


https://vladmihalcea.com/the-best-way-to-lazy-load-entity-attributes-using-jpa-and-hibernate/				read

https://thoughts-on-java.org/5-ways-to-initialize-lazy-relations-and-when-to-use-them/						read


[18/01/2020]
https://stackoverflow.com/questions/30549489/what-is-this-spring-jpa-open-in-view-true-property-in-spring-boot/48222934#48222934				read

https://vladmihalcea.com/the-best-way-to-handle-the-lazyinitializationexception/																				read


[20/01/2020]
JUnit in Action
5.2 Writing testable codes
	5.2.1	Public APIs are contracts
	5.2.2	Reduces dependencies
	5.2.3	Create simple constructors
	5.2.4	Follow the principle of Least Knowledge (the Law of Demeter)
	5.2.5	Avoid hidden dependencies and global state
	5.2.6	Singletons pros and cons
	5.2.7	Favour generic methods (favour polymorphism)
	5.2.8	Favour composition over inheritance
	5.2.9	Favour polymorphism over conditionals
	
JUnit test best practices: 
 - unit test one object at a time
 - choose meaningful test method names
 - explain the failure reason in assert calls
 - one unit test equals one @Test method
 - test anything that could possibly fail
 - make exception tests easy to read
 - let the test improve the code
 - always specify reason for skipping a test
 - same package, separated directories
 - refactor
 - write falling tests first
 - continuous regression testing
 - don't write business logic in mock objects
 - test only what can possibly break
 
An effective design strategy is to pass to an object any other object that's outside its 
immediate business logic. The choice of peripheral objects can be controlled by someone 
higher in the calling chain. Ultimately, as you move up in the calling layers, the decision
to use a given logger or configuration should be pushed to the top level. 
This strategy provides the best possible code flexibility and ability to cope with changes. 

Code flexibility and the ability to resist change. 


[28/01/2020]
JUnit in Action 
10.1 Maven's features
	10.1.1	Convention over Configuration
	10.1.2 	Strong dependency management
				central repository
				local repository
	10.1.3	Maven build lifecycles
		Built-in lifecycles of Maven: 
		 - Default: generating the project's actifact
		 - Clean: cleaning the project
		 - Site: generating the project's documentation
		Phases of the default:
		 - Validate
		 - Compile
		 - Test
		 - Package
		 - Integration Test
		 - Verify
		 - Install
		 - Deploy
	10.1.4	Plugin-based architecture
		Core Maven's plugins: 
		 - Clean plugin
		 - Compiler plugin
		 - Deploy plugin
		 - Install plugin
		 - Resources plugin
		 - Site plugin
		 - Surefire plugin
		 - Verifier plugin
		 

https://javarevisited.blogspot.com/2012/07/cyclicbarrier-example-java-5-concurrency-tutorial.html		done

https://javarevisited.blogspot.com/2011/06/volatile-keyword-java-example-tutorial.html					read

https://javarevisited.blogspot.com/2012/07/why-enum-singleton-are-better-in-java.html					read

https://javarevisited.blogspot.com/2012/02/producer-consumer-design-pattern-with.html					done

https://javarevisited.blogspot.com/2011/10/how-to-stop-thread-java-example.html							done


[29/01/2020]
https://javarevisited.blogspot.com/2011/04/synchronization-in-java-synchronized.html					read		lots of good info!
	static synchronized method locked on class object lock and non-static synchronized method locks 
	on current object (this). So it’s possible that both static and non-static java synchronized 
	method running in parallel.  This is the common mistake a naive developer do while writing Java 
	synchronized code.
	synchronized block: if object used to lock synchronized block of code is null then Java 
	synchronized block will throw a NullPointerException.


[14/02/2019]
PostgreSQL SERIAL column and Hibernate IDENTITY generator
https://vladmihalcea.com/postgresql-serial-column-hibernate-identity/										read


